{
  
    
        "post0": {
            "title": "Recognizing Handwritten Digits",
            "content": "Introduction . The scikit-learn library provides a good example to better understand this technique, the issues involved, and the possibility of making prediction. . from sklearn import datasets from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestClassifier from sklearn.metrics import accuracy_score import matplotlib.pyplot as plt %matplotlib inline . The scikit-learn library provides numerous datasets that are useful for testing many problems of data analysis and prediction of the results. Also in this case there is a dataset of images called Digits. Loading the digit dataset . digits = datasets.load_digits() . read lots of information about the datasets by calling the DESCR attribute. . print(digits.DESCR) . .. _digits_dataset: Optical recognition of handwritten digits dataset -- **Data Set Characteristics:** :Number of Instances: 1797 :Number of Attributes: 64 :Attribute Information: 8x8 image of integer pixels in the range 0..16. :Missing Attribute Values: None :Creator: E. Alpaydin (alpaydin &#39;@&#39; boun.edu.tr) :Date: July; 1998 This is a copy of the test set of the UCI ML hand-written digits datasets https://archive.ics.uci.edu/ml/datasets/Optical+Recognition+of+Handwritten+Digits The data set contains images of hand-written digits: 10 classes where each class refers to a digit. Preprocessing programs made available by NIST were used to extract normalized bitmaps of handwritten digits from a preprinted form. From a total of 43 people, 30 contributed to the training set and different 13 to the test set. 32x32 bitmaps are divided into nonoverlapping blocks of 4x4 and the number of on pixels are counted in each block. This generates an input matrix of 8x8 where each element is an integer in the range 0..16. This reduces dimensionality and gives invariance to small distortions. For info on NIST preprocessing routines, see M. D. Garris, J. L. Blue, G. T. Candela, D. L. Dimmick, J. Geist, P. J. Grother, S. A. Janet, and C. L. Wilson, NIST Form-Based Handprint Recognition System, NISTIR 5469, 1994. .. topic:: References - C. Kaynak (1995) Methods of Combining Multiple Classifiers and Their Applications to Handwritten Digit Recognition, MSc Thesis, Institute of Graduate Studies in Science and Engineering, Bogazici University. - E. Alpaydin, C. Kaynak (1998) Cascading Classifiers, Kybernetika. - Ken Tang and Ponnuthurai N. Suganthan and Xi Yao and A. Kai Qin. Linear dimensionalityreduction using relevance weighted LDA. School of Electrical and Electronic Engineering Nanyang Technological University. 2005. - Claudio Gentile. A New Approximate Maximal Margin Classification Algorithm. NIPS. 2000. . The images of the handwritten digits are contained in a digits.images array. Each element of this array is an image that is represented by an 8x8 matrix of numerical values that correspond to a grayscale from white, with a value of 0, to black, with the value 15. . Example for digits.images[1] . digits.images[1], digits.images[1].shape . (array([[ 0., 0., 0., 12., 13., 5., 0., 0.], [ 0., 0., 0., 11., 16., 9., 0., 0.], [ 0., 0., 3., 15., 16., 6., 0., 0.], [ 0., 7., 15., 16., 16., 2., 0., 0.], [ 0., 0., 1., 16., 16., 3., 0., 0.], [ 0., 0., 1., 16., 16., 6., 0., 0.], [ 0., 0., 1., 16., 16., 6., 0., 0.], [ 0., 0., 0., 11., 16., 10., 0., 0.]]), (8, 8)) . You can visually check the contents of this result using the matplotlib library, By launching this command, you will obtain the grayscale image . plt.imshow(digits.images[1], cmap=plt.cm.gray_r, interpolation=&#39;nearest&#39;) . &lt;matplotlib.image.AxesImage at 0x7f4fc8125990&gt; . Numerical values represented by images, i.e., the targets, are contained in the digit.targets array. . digits.target . array([0, 1, 2, ..., 8, 9, 8]) . It was reported that the dataset is a training set consisting of 1,797 images. You can determine if that is true . digits.target.size . 1797 . digits.images.shape, digits.target.shape . ((1797, 8, 8), (1797,)) . N, H, W = digits.images.shape N, H, W . (1797, 8, 8) . Inputs to the model should be of shape No. of samples * No. of features. . So our digits inputs should be reshaped from 1797 * 8 * 8 to 1797 * 64. . digits.images = digits.images.reshape(N, (H * W)) digits.images.shape . (1797, 64) . train_test_split is used to split the data . Step 1-Splitting the data in to 80 percent and 20 percent . train_X, val_X, train_y, val_y = train_test_split(digits.images, digits.target, test_size=0.2) train_X.shape, val_X.shape, train_y.shape, val_y.shape . ((1437, 64), (360, 64), (1437,), (360,)) . Firstly we create the RF model and fit model to train data,predict the train data using trained model,predict on valid data using trained model printing the accuracy scores for both train and valid data . model = RandomForestClassifier(random_state=0) # fit model to train data model.fit(train_X, train_y) # predict on train data using trained model train_pred = model.predict(train_X) # predict on valid data using trained model val_pred = model.predict(val_X) # print accuracy scores for both train and valid data print(f&quot;Train accuracy: {accuracy_score(train_y, train_pred)}&quot;) print(f&quot;Valid accuracy: {accuracy_score(val_y, val_pred)}&quot;) . Train accuracy: 1.0 Valid accuracy: 0.9722222222222222 . Step-2 Splitting the data in to 70 percent and 30 percent and predicting the accuracy . train_X, val_X, train_y, val_y = train_test_split(digits.images, digits.target, test_size=0.3) train_X.shape, val_X.shape, train_y.shape, val_y.shape . ((1257, 64), (540, 64), (1257,), (540,)) . model = RandomForestClassifier(random_state=0) # fit model to train data model.fit(train_X, train_y) # predict on train data using trained model train_pred = model.predict(train_X) # predict on valid data using trained model val_pred = model.predict(val_X) # print accuracy scores for both train and valid data print(f&quot;Train accuracy: {accuracy_score(train_y, train_pred)}&quot;) print(f&quot;Valid accuracy: {accuracy_score(val_y, val_pred)}&quot;) . Train accuracy: 1.0 Valid accuracy: 0.9703703703703703 . Step-3 Splitting the data in to 60 percent and 40 percent and predicting the accuracy . train_X, val_X, train_y, val_y = train_test_split(digits.images, digits.target, test_size=0.4) train_X.shape, val_X.shape, train_y.shape, val_y.shape . ((1078, 64), (719, 64), (1078,), (719,)) . model = RandomForestClassifier(random_state=0) # fit model to train data model.fit(train_X, train_y) # predict on train data using trained model train_pred = model.predict(train_X) # predict on valid data using trained model val_pred = model.predict(val_X) # print accuracy scores for both train and valid data print(f&quot;Train accuracy: {accuracy_score(train_y, train_pred)}&quot;) print(f&quot;Valid accuracy: {accuracy_score(val_y, val_pred)}&quot;) . Train accuracy: 1.0 Valid accuracy: 0.9763560500695411 . Conclusion . We can clearly say that in all the 3 steps the accuracy of our model is more than 95 percent, hence the hypothesis is accepted . &quot;I am thankful to mentors at https://internship.suvenconsultants.com for providing awesome problem statements and giving many of us a Coding Internship Exprience. Thank you www.suvenconsultants.com&quot; .",
            "url": "https://gagan190.github.io/GDKBlogs/dataanalysis/2022/09/08/Recognizing-Handwritten-Digits.html",
            "relUrl": "/dataanalysis/2022/09/08/Recognizing-Handwritten-Digits.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Meterological Data Analysis",
            "content": "Introduction . The main goal in this Internship (of data analysis) is to transform the raw data into information and then convert it into knowledge. Hypothesis-&quot;Has the Apparent temperature and humidity compared monthly across 10 years of the data indicate an increase due to Global warming&quot; . It is used to enable the library/function autocompletion| . %config Completer.use_jedi = False . Importing pandas into python environment in order to access the syntax. The importing seaborn portion of the code tells Python to bring the Seaborn library into your current environment. Then import the specific path. import matplotlib.pyplot as plt gives an unfamiliar reader a hint that pyplot is a module, rather than a function which could be incorrectly assumed from the first form. . import pandas as pd import seaborn as sns from pathlib import Path import matplotlib.pyplot as plt #set seaborn plotting aesthetics as default sns.set() . To get the current working directory and assigning to the project_path . project_path = Path.cwd().parent project_path . PosixPath(&#39;/mnt/d/workspace/gagan/_Internship/Project_1_md&#39;) . .csv is a standard way to store structured data in a plain text format. And it is assigned and stored in data_path . data_path = project_path/&quot;data&quot;/&quot;weatherHistory.csv&quot; data_path . PosixPath(&#39;/mnt/d/workspace/gagan/_Internship/Project_1_md/data/weatherHistory.csv&#39;) . read_csv is used to read the content in the data path and it is stored in the data frame. df.head(2) is used to get the information of first two rows. . df = pd.read_csv(data_path) df.head(2) . Formatted Date Summary Precip Type Temperature (C) Apparent Temperature (C) Humidity Wind Speed (km/h) Wind Bearing (degrees) Visibility (km) Pressure (millibars) Daily Summary . 0 2006-04-01 00:00:00.000 +0200 | Partly Cloudy | rain | 9.472222 | 7.388889 | 0.89 | 14.1197 | 251 | 15.8263 | 1015.13 | Partly cloudy throughout the day. | . 1 2006-04-01 01:00:00.000 +0200 | Partly Cloudy | rain | 9.355556 | 7.227778 | 0.86 | 14.2646 | 259 | 15.8263 | 1015.63 | Partly cloudy throughout the day. | . df.tail(2) to get the information of bottom two rows. . df.tail(2) . Formatted Date Summary Precip Type Temperature (C) Apparent Temperature (C) Humidity Wind Speed (km/h) Wind Bearing (degrees) Visibility (km) Pressure (millibars) Daily Summary . 96451 2016-09-09 22:00:00.000 +0200 | Partly Cloudy | rain | 21.522222 | 21.522222 | 0.60 | 10.5294 | 20 | 16.1000 | 1015.95 | Partly cloudy starting in the morning. | . 96452 2016-09-09 23:00:00.000 +0200 | Partly Cloudy | rain | 20.438889 | 20.438889 | 0.61 | 5.8765 | 39 | 15.5204 | 1016.16 | Partly cloudy starting in the morning. | . Changing the data type of the formatted data from string to datetime . df[&#39;Formatted Date&#39;] = pd.to_datetime(df[&#39;Formatted Date&#39;], utc=True) df[&#39;Formatted Date&#39;][0] . Timestamp(&#39;2006-03-31 22:00:00+0000&#39;, tz=&#39;UTC&#39;) . df = df.sort_values(by = &#39;Formatted Date&#39;) df.head(2) . Formatted Date Summary Precip Type Temperature (C) Apparent Temperature (C) Humidity Wind Speed (km/h) Wind Bearing (degrees) Visibility (km) Pressure (millibars) Daily Summary . 2880 2005-12-31 23:00:00+00:00 | Partly Cloudy | rain | 0.577778 | -4.050000 | 0.89 | 17.1143 | 140 | 9.9820 | 1016.66 | Mostly cloudy throughout the day. | . 2881 2006-01-01 00:00:00+00:00 | Mostly Cloudy | rain | 1.161111 | -3.238889 | 0.85 | 16.6152 | 139 | 9.9015 | 1016.15 | Mostly cloudy throughout the day. | . info() is used to get the details of all the rows and columns along with its respective data type. . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 96453 entries, 2880 to 89732 Data columns (total 11 columns): # Column Non-Null Count Dtype -- -- 0 Formatted Date 96453 non-null datetime64[ns, UTC] 1 Summary 96453 non-null object 2 Precip Type 95936 non-null object 3 Temperature (C) 96453 non-null float64 4 Apparent Temperature (C) 96453 non-null float64 5 Humidity 96453 non-null float64 6 Wind Speed (km/h) 96453 non-null float64 7 Wind Bearing (degrees) 96453 non-null int64 8 Visibility (km) 96453 non-null float64 9 Pressure (millibars) 96453 non-null float64 10 Daily Summary 96453 non-null object dtypes: datetime64[ns, UTC](1), float64(6), int64(1), object(3) memory usage: 8.8+ MB . describe() method returns description of the data in the DataFrame. . df.describe() . Temperature (C) Apparent Temperature (C) Humidity Wind Speed (km/h) Wind Bearing (degrees) Visibility (km) Pressure (millibars) . count 96453.000000 | 96453.000000 | 96453.000000 | 96453.000000 | 96453.000000 | 96453.000000 | 96453.000000 | . mean 11.932678 | 10.855029 | 0.734899 | 10.810640 | 187.509232 | 10.347325 | 1003.235956 | . std 9.551546 | 10.696847 | 0.195473 | 6.913571 | 107.383428 | 4.192123 | 116.969906 | . min -21.822222 | -27.716667 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | . 25% 4.688889 | 2.311111 | 0.600000 | 5.828200 | 116.000000 | 8.339800 | 1011.900000 | . 50% 12.000000 | 12.000000 | 0.780000 | 9.965900 | 180.000000 | 10.046400 | 1016.450000 | . 75% 18.838889 | 18.838889 | 0.890000 | 14.135800 | 290.000000 | 14.812000 | 1021.090000 | . max 39.905556 | 39.344444 | 1.000000 | 63.852600 | 359.000000 | 16.100000 | 1046.380000 | . The columns which are inputted in to our model is called as features. We can select multiple features by providing a (list of columns names) inside the bracket. For example In the below code line it gives the information about the formatted data,Apparent temperature,humidity. th.head() by default it takes the value as 5. . features = [&quot;Formatted Date&quot;, &quot;Apparent Temperature (C)&quot;, &quot;Humidity&quot;] th = df[features] th.head() . Formatted Date Apparent Temperature (C) Humidity . 2880 2005-12-31 23:00:00+00:00 | -4.050000 | 0.89 | . 2881 2006-01-01 00:00:00+00:00 | -3.238889 | 0.85 | . 2882 2006-01-01 01:00:00+00:00 | -3.155556 | 0.82 | . 2883 2006-01-01 02:00:00+00:00 | -2.194444 | 0.82 | . 2884 2006-01-01 03:00:00+00:00 | -2.744444 | 0.86 | . set_index() is a method to set a List, Series or Data frame as index of a Data Frame. Index column can be set while making a data frame too. But sometimes a data frame is made out of two or more data frames and hence later index can be changed using this method. . Now we can see here, the formatted Data is acting as the index. . th = th.set_index(&#39;Formatted Date&#39;) th.head() . Apparent Temperature (C) Humidity . Formatted Date . 2005-12-31 23:00:00+00:00 -4.050000 | 0.89 | . 2006-01-01 00:00:00+00:00 -3.238889 | 0.85 | . 2006-01-01 01:00:00+00:00 -3.155556 | 0.82 | . 2006-01-01 02:00:00+00:00 -2.194444 | 0.82 | . 2006-01-01 03:00:00+00:00 -2.744444 | 0.86 | . For our problem statement we need to delete the 2005 row details. Then the th.head() is used to see the changes. . th = th.iloc[1:] th.head() . Apparent Temperature (C) Humidity . Formatted Date . 2006-01-01 00:00:00+00:00 -3.238889 | 0.85 | . 2006-01-01 01:00:00+00:00 -3.155556 | 0.82 | . 2006-01-01 02:00:00+00:00 -2.194444 | 0.82 | . 2006-01-01 03:00:00+00:00 -2.744444 | 0.86 | . 2006-01-01 04:00:00+00:00 -3.072222 | 0.85 | . Now we can see that we are having the information of two columns Apparent Temperature (C),Humidity with the datatype float. . th.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; DatetimeIndex: 96452 entries, 2006-01-01 00:00:00+00:00 to 2016-12-31 22:00:00+00:00 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 Apparent Temperature (C) 96452 non-null float64 1 Humidity 96452 non-null float64 dtypes: float64(2) memory usage: 2.2 MB . describe() method returns description of the data in the DataFrame. . th.describe() . Apparent Temperature (C) Humidity . count 96452.000000 | 96452.000000 | . mean 10.855183 | 0.734897 | . std 10.696795 | 0.195473 | . min -27.716667 | 0.000000 | . 25% 2.311111 | 0.600000 | . 50% 12.000000 | 0.780000 | . 75% 18.838889 | 0.890000 | . max 39.344444 | 1.000000 | . Plotting the line graph for the given data . sns.lineplot(data=th); . Resampling (M) and we are taking mean in the form of monthly status . montly_th = th.resample(&#39;M&#39;).mean() montly_th.head() . Apparent Temperature (C) Humidity . Formatted Date . 2006-01-31 00:00:00+00:00 -4.173708 | 0.834610 | . 2006-02-28 00:00:00+00:00 -2.990716 | 0.843467 | . 2006-03-31 00:00:00+00:00 1.969780 | 0.778737 | . 2006-04-30 00:00:00+00:00 12.098827 | 0.728625 | . 2006-05-31 00:00:00+00:00 15.539479 | 0.721801 | . To get the detailed information about the data . montly_th.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; DatetimeIndex: 132 entries, 2006-01-31 00:00:00+00:00 to 2016-12-31 00:00:00+00:00 Freq: M Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 Apparent Temperature (C) 132 non-null float64 1 Humidity 132 non-null float64 dtypes: float64(2) memory usage: 3.1 KB . Variation of the temperature and humididty over the period of time . fig, axes = plt.subplots(1, 2, figsize= (20, 7)) #create boxplot in each subplot sns.lineplot(data=montly_th, x=&#39;Formatted Date&#39;, y=&#39;Apparent Temperature (C)&#39;, ax=axes[0]) sns.lineplot(data=montly_th, x=&#39;Formatted Date&#39;, y=&#39;Humidity&#39;, ax=axes[1]) plt.show() . We need to take the samples of each month corresponds to every year . month_idx = 4 # April montly_th_april = montly_th[montly_th.index.month == month_idx] montly_th_april . Apparent Temperature (C) Humidity . Formatted Date . 2006-04-30 00:00:00+00:00 12.098827 | 0.728625 | . 2007-04-30 00:00:00+00:00 11.894421 | 0.536361 | . 2008-04-30 00:00:00+00:00 11.183688 | 0.693194 | . 2009-04-30 00:00:00+00:00 14.267076 | 0.567847 | . 2010-04-30 00:00:00+00:00 11.639406 | 0.706875 | . 2011-04-30 00:00:00+00:00 12.978997 | 0.591625 | . 2012-04-30 00:00:00+00:00 11.782770 | 0.650222 | . 2013-04-30 00:00:00+00:00 12.045563 | 0.677667 | . 2014-04-30 00:00:00+00:00 12.486181 | 0.691403 | . 2015-04-30 00:00:00+00:00 10.632801 | 0.547764 | . 2016-04-30 00:00:00+00:00 12.731427 | 0.659972 | . graph of temperature and humidity of the particular month . plt.figure(figsize=(15, 5)) plt.plot(montly_th_april, marker=&#39;o&#39;, label=[&#39;Apparent Temperature (C)&#39;,&#39;Humidity&#39;] ); plt.legend(loc = &#39;center right&#39;, fontsize = 10) plt.title(&#39;Relation between temperature and humidity for the month of April&#39;) plt.show() . By the above graph we can say there is a drastic increase in temperature wrt to humididty at the year 2009. . Conclusion . By the above graph we can clearly say that the temperature is varying but there is only the small change wrt to humidity for 10 years . &quot;I am thankful to mentors at https://internship.suvenconsultants.com for providing awesome problem statements and . giving many of us a Coding Internship Exprience. Thank you www.suvenconsultants.com&quot; .",
            "url": "https://gagan190.github.io/GDKBlogs/dataanalysis/2022/09/08/Meterological-Data-Analysis.html",
            "relUrl": "/dataanalysis/2022/09/08/Meterological-Data-Analysis.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://gagan190.github.io/GDKBlogs/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://gagan190.github.io/GDKBlogs/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://gagan190.github.io/GDKBlogs/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://gagan190.github.io/GDKBlogs/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}